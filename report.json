[
  {
    "coverage": {
      "files": {
        "codigo.c": {
          "coverage_stats": {
            "covered_lines": 5,
            "total_hits": 8
          },
          "covered_lines": {
            "10": {
              "covered": true,
              "hits": 1,
              "type": "execution"
            },
            "12": {
              "covered": true,
              "hits": 3,
              "type": "violation"
            },
            "16": {
              "covered": true,
              "hits": 2,
              "type": "execution"
            },
            "19": {
              "covered": true,
              "hits": 1,
              "type": "execution"
            },
            "7": {
              "covered": true,
              "hits": 1,
              "type": "violation"
            }
          }
        }
      }
    },
    "initial_values": {
      "d": {
        "name": "d",
        "type": "signed",
        "value": "1"
      },
      "i": {
        "name": "i",
        "type": "signed",
        "value": "-2147483648"
      }
    },
    "source_files": {
      "codigo.c": [
        "#include <assert.h>",
        "",
        "void processa(int indice, int divisor) {",
        "    int arr[10];",
        "",
        "    // Propriedade 1: O índice deve ser válido",
        "    assert(indice >= 0 && indice < 10); // << Erro potencial 1",
        "",
        "    // Propriedade 2: O divisor não pode ser zero",
        "    assert(divisor != 0); // << Erro potencial 2",
        "",
        "    arr[indice] = 100 / divisor;",
        "}",
        "",
        "int main() {",
        "    int i, d;",
        "    processa(i, d);",
        "    return 0;",
        "}"
      ]
    },
    "status": "violation",
    "steps": [
      {
        "assignment": {
          "lhs": "i",
          "lhs_type": "signed",
          "rhs": "-2147483648",
          "rhs_type": "signed"
        },
        "file": "codigo.c",
        "function": "main",
        "line": "16",
        "step_number": 0,
        "type": "assignment"
      },
      {
        "assignment": {
          "lhs": "d",
          "lhs_type": "signed",
          "rhs": "1",
          "rhs_type": "signed"
        },
        "file": "codigo.c",
        "function": "main",
        "line": "16",
        "step_number": 1,
        "type": "assignment"
      },
      {
        "assertion": {
          "comment": "assertion indice >= 0 && indice < 10",
          "guard": "indice >= 0 && indice < 10",
          "violated": true
        },
        "file": "codigo.c",
        "function": "processa",
        "line": "7",
        "message": "assertion indice >= 0 && indice < 10",
        "step_number": 2,
        "type": "violation"
      },
      {
        "file": "codigo.c",
        "function": "processa",
        "line": "10",
        "step_number": 3,
        "type": "assert"
      },
      {
        "assertion": {
          "comment": "array bounds violated: array `arr' lower bound",
          "guard": "(signed long int)indice >= 0",
          "violated": true
        },
        "file": "codigo.c",
        "function": "processa",
        "line": "12",
        "message": "array bounds violated: array `arr' lower bound",
        "step_number": 4,
        "type": "violation"
      },
      {
        "file": "codigo.c",
        "function": "processa",
        "line": "12",
        "step_number": 5,
        "type": "assert"
      },
      {
        "file": "codigo.c",
        "function": "processa",
        "line": "12",
        "step_number": 6,
        "type": "assert"
      },
      {
        "file": "codigo.c",
        "function": "main",
        "line": "19",
        "message": "Assumption restriction",
        "step_number": 7,
        "type": "assume"
      }
    ]
  }
]
